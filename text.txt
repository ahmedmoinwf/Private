import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.web.reactive.function.client.WebClient;
import org.springframework.web.reactive.function.client.WebClientResponseException;
import reactor.core.publisher.Mono;
import reactor.test.StepVerifier;

import java.time.Duration;
import java.util.function.Consumer;

import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
public class ExternalServiceConfigTest {

    @Mock
    private WebClient webClient;

    @InjectMocks
    private ExternalServiceConfig externalServiceConfig;

    private Consumer<HttpHeaders> serviceSpecificRequestHeaders;

    @BeforeEach
    void setUp() {
        serviceSpecificRequestHeaders = headers -> {
            // Add custom headers if needed
        };
    }

    @Test
    void testSuccessfulResponse() {
        String expectedResponse = "Success";
        when(webClient.get().uri(any()).headers(any()).retrieve().bodyToMono(String.class))
                .thenReturn(Mono.just(expectedResponse));

        Mono<String> result = externalServiceConfig.invokeExternalService("/service", "key", "value", serviceSpecificRequestHeaders);

        StepVerifier.create(result)
                .expectNext(expectedResponse)
                .verifyComplete();
    }

    @Test
    void testClientError() {
        WebClientResponseException exception = WebClientResponseException.create(404, null, null, null, null);
        when(webClient.get().uri(any()).headers(any()).retrieve().bodyToMono(String.class))
                .thenReturn(Mono.error(exception));

        Mono<String> result = externalServiceConfig.invokeExternalService("/service", "key", "value", serviceSpecificRequestHeaders);

        StepVerifier.create(result)
                .expectError(DocCenterServiceException.class)
                .verify();
    }

    @Test
    void testServerError() {
        WebClientResponseException exception = WebClientResponseException.create(500, null, null, null, null);
        when(webClient.get().uri(any()).headers(any()).retrieve().bodyToMono(String.class))
                .thenReturn(Mono.error(exception));

        Mono<String> result = externalServiceConfig.invokeExternalService("/service", "key", "value", serviceSpecificRequestHeaders);

        StepVerifier.create(result)
                .expectError(DocCenterServiceException.class)
                .verify();
    }

    @Test
    void testTimeout() {
        when(webClient.get().uri(any()).headers(any()).retrieve().bodyToMono(String.class))
                .thenReturn(Mono.never());

        Mono<String> result = externalServiceConfig.invokeExternalService("/service", "key", "value", serviceSpecificRequestHeaders);

        StepVerifier.create(result)
                .expectError(DocCenterServiceException.class)
                .verify(Duration.ofSeconds(11)); // Adjust the duration as needed
    }

    @Test
    void testExceptionHandling() {
        RuntimeException exception = new RuntimeException("Test exception");
        when(webClient.get().uri(any()).headers(any()).retrieve().bodyToMono(String.class))
                .thenReturn(Mono.error(exception));

        Mono<String> result = externalServiceConfig.invokeExternalService("/service", "key", "value", serviceSpecificRequestHeaders);

        StepVerifier.create(result)
                .expectError(DocCenterServiceException.class)
                .verify();
    }
}
