@InjectMocks
private WebClientConfiguration webClientConfiguration;

@Mock
private CloseableHttpAsyncClient httpClient;

@Mock
private Consumer<HttpHeaders> headerConsumer;

@BeforeEach
void setUp() {
    ReflectionTestUtils.setField(webClientConfiguration, "faBaseUrl", "https://example.com");
}

@Test
void getWebClient_shouldReturnWebClientInstance() throws Exception {
    // Arrange
    when(webClientConfiguration.buildCloseableHttpAsyncClient()).thenReturn(httpClient);
    when(webClientConfiguration.addCommonRequestHeaderValues()).thenReturn(headerConsumer);

    // Act
    WebClient webClient = webClientConfiguration.getWebclient();

    // Assert
    assertNotNull(webClient);
    assertEquals("https://example.com", webClient.getUriSpecification().getBaseUrl());

    verify(webClientConfiguration, times(1)).buildCloseableHttpAsyncClient();
    verify(webClientConfiguration, times(1)).addCommonRequestHeaderValues();
}

@Test
void buildWebClient_shouldReturnWebClientInstance() throws Exception {
    // Arrange
    String baseUrl = "https://example.com";
    when(webClientConfiguration.buildCloseableHttpAsyncClient()).thenReturn(httpClient);
    when(webClientConfiguration.addCommonRequestHeaderValues()).thenReturn(headerConsumer);

    // Act
    WebClient webClient = ReflectionTestUtils.invokeMethod(
            webClientConfiguration, "buildWebClient", baseUrl);

    // Assert
    assertNotNull(webClient);
    assertEquals(baseUrl, webClient.getUriSpecification().getBaseUrl());

    verify(webClientConfiguration, times(1)).buildCloseableHttpAsyncClient();
    verify(webClientConfiguration, times(1)).addCommonRequestHeaderValues();
}

@Test
void buildWebClient_shouldLogErrorWhenExceptionOccurs() throws Exception {
    // Arrange
    String baseUrl = "https://example.com";
    when(webClientConfiguration.buildCloseableHttpAsyncClient()).thenThrow(new RuntimeException("Test Exception"));

    // Act
    WebClient webClient = ReflectionTestUtils.invokeMethod(
            webClientConfiguration, "buildWebClient", baseUrl);

    // Assert
    assertNull(webClient);

    verify(webClientConfiguration, times(1)).buildCloseableHttpAsyncClient();
    verify(webClientConfiguration, never()).addCommonRequestHeaderValues();
}
