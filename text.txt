import okhttp3.mockwebserver.MockResponse;
import okhttp3.mockwebserver.MockWebServer;
import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.TestPropertySource;
import reactor.core.publisher.Mono;
import reactor.test.StepVerifier;

import java.io.IOException;

@SpringBootTest(classes = {WebClientConfiguration.class, ExternalServiceConfig.class})
@TestPropertySource(properties = "fa.baseUrl=http://localhost:8080")
class ExternalServiceConfigTest {

    private static MockWebServer mockWebServer;

    @Autowired
    private ExternalServiceConfig externalServiceConfig;

    @BeforeAll
    static void setUp() throws IOException {
        mockWebServer = new MockWebServer();
        mockWebServer.start(8080);
    }

    @AfterAll
    static void tearDown() throws IOException {
        mockWebServer.shutdown();
    }

    @Test
    void testInvokeExternalService_SuccessResponse() {
        String serviceUrl = "/service";
        String key = "param";
        String value = "value";
        String expectedResponse = "Success Response";
        CachedKeyStore cachedKeyStore = new CachedKeyStore();
        cachedKeyStore.setKeystore(Mockito.mock(KeyStore.class));
        cachedKeyStore.setPassword("password");
        Mockito.when(cloudKeystoreService.cache()).thenReturn(Mockito.mock(Cache.class));
        Mockito.when(cloudKeystoreService.cache().get("mykeystore")).thenReturn(cachedKeyStore);

        mockWebServer.enqueue(new MockResponse()
                .setBody(expectedResponse)
                .addHeader("Content-Type", "text/plain"));

        Mono<String> responseMono = externalServiceConfig.invokeExternalService(
                serviceUrl,
                key,
                value,
                httpHeaders -> {}
        );

        StepVerifier.create(responseMono)
                .expectNext(expectedResponse)
                .verifyComplete();
    }
}
