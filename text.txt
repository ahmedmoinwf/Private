import com.wellsfargo.cloud.tls.CloudKeystoreService;
import com.wellsfargo.cloud.tls.keystore.CachedKeyStore;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.http.HttpHeaders;
import org.springframework.web.reactive.function.client.WebClient;

import java.security.KeyStoreException;
import java.security.NoSuchAlgorithmException;
import java.security.UnrecoverableKeyException;
import java.time.Instant;
import java.util.UUID;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
class WebClientConfigurationTest {

    @Mock
    private CloudKeystoreService cloudKeystoreServiceMock;

    @InjectMocks
    private WebClientConfiguration webClientConfiguration;

    private CachedKeyStore cachedKeyStoreMock;

    @BeforeEach
    void setUp() throws KeyStoreException, NoSuchAlgorithmException, UnrecoverableKeyException {
        cachedKeyStoreMock = new CachedKeyStore(null, "password".toCharArray());
        when(cloudKeystoreServiceMock.cache().get("mykeystore")).thenReturn(cachedKeyStoreMock);
    }

    @Test
    void testGetWebclient() {
        WebClient webClient = webClientConfiguration.getWebclient();
        assertNotNull(webClient);
    }

    @Test
    void testAddCommonRequestHeaderValues() {
        Consumer<HttpHeaders> headerConsumer = webClientConfiguration.addCommonRequestHeaderValues();
        HttpHeaders headers = new HttpHeaders();
        headerConsumer.accept(headers);

        assertNotNull(headers.get("WF-senderMessageId"));
        assertNotNull(headers.get("WF-creationTimeStamp"));
        assertEquals("1WOC", headers.get("WF-senderApplicationId").get(0));
        assertEquals("localhost", headers.get("WF-senderHostName").get(0));
    }
}
