import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.web.reactive.function.client.WebClient;
import reactor.core.publisher.Mono;
import reactor.test.StepVerifier;

import java.util.function.Consumer;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
public class ExternalServiceConfigTest {

        @Mock
        private WebClient webClientMock;

        @Mock
        private WebClient.RequestHeadersUriSpec requestHeadersUriSpecMock;

        @Mock
        private WebClient.RequestHeadersSpec requestHeadersSpecMock;

        @Mock
        private WebClient.ResponseSpec responseSpecMock;

        @InjectMocks
        private ExternalServiceConfig externalServiceConfig;

        @Test
        void givenServiceUrl_whenInvokeExternalService_thenReturnResponse() {
                String serviceUrl = "/api/external";
                String key = "param";
                String value = "value";
                String expectedResponse = "Success";

                when(webClientMock.get()).thenReturn(requestHeadersUriSpecMock);
                when(requestHeadersUriSpecMock.uri(any(String.class), any(String.class), any(String.class)))
                .thenReturn(requestHeadersSpecMock);
                when(requestHeadersSpecMock.headers(any(Consumer.class))).thenReturn(requestHeadersSpecMock);
                when(requestHeadersSpecMock.retrieve()).thenReturn(responseSpecMock);
                when(responseSpecMock.bodyToMono(String.class)).thenReturn(Mono.just(expectedResponse));

                Mono<String> result = externalServiceConfig.invokeExternalService(serviceUrl, key, value, headers -> {});

                StepVerifier.create(result)
                .expectNext(expectedResponse)
                .verifyComplete();
        }

        @Test
        void givenServiceUrl_whenInvokeExternalService_thenHandleErrors() {
                String serviceUrl = "/api/external";
                String key = "param";
                String value = "value";
                String errorMessage = "Error occurred";

                // Mock the WebClient behavior for client error
                when(webClientMock.get()).thenReturn(requestHeadersUriSpecMock);
                when(requestHeadersUriSpecMock.uri(any(String.class), any(String.class), any(String.class)))
                .thenReturn(requestHeadersSpecMock);
                when(requestHeadersSpecMock.headers(any(Consumer.class))).thenReturn(requestHeadersSpecMock);
                when(requestHeadersSpecMock.retrieve()).thenReturn(responseSpecMock);
                when(responseSpecMock.bodyToMono(String.class)).thenReturn(Mono.error(new RuntimeException(errorMessage)));

                Mono<String> result = externalServiceConfig.invokeExternalService(serviceUrl, key, value, headers -> {});
                StepVerifier.create(result)
                .expectError(DocCenterServiceException.class)
                .verify();

                // Mock the WebClient behavior for server error
                when(webClientMock.get()).thenReturn(requestHeadersUriSpecMock);
                when(requestHeadersUriSpecMock.uri(any(String.class), any(String.class), any(String.class)))
                .thenReturn(requestHeadersSpecMock);
                when(requestHeadersSpecMock.headers(any(Consumer.class))).thenReturn(requestHeadersSpecMock);
                when(requestHeadersSpecMock.retrieve()).thenReturn(responseSpecMock);
                when(responseSpecMock.bodyToMono(String.class)).thenReturn(Mono.error(new RuntimeException(errorMessage)));

                result = externalServiceConfig.invokeExternalService(serviceUrl, key, value, headers -> {});
                StepVerifier.create(result)
                .expectError(DocCenterServiceException.class)
                .verify();
        }

        @Test
        void givenServiceUrl_whenInvokeExternalService_thenHandleTimeout() {
                String serviceUrl = "/api/external";
                String key = "param";
                String value = "value";

                when(webClientMock.get()).thenReturn(requestHeadersUriSpecMock);
                when(requestHeadersUriSpecMock.uri(any(String.class), any(String.class), any(String.class)))
                .thenReturn(requestHeadersSpecMock);
                when(requestHeadersSpecMock.headers(any(Consumer.class))).thenReturn(requestHeadersSpecMock);
                when(requestHeadersSpecMock.retrieve()).thenReturn(responseSpecMock);
                when(responseSpecMock.bodyToMono(String.class)).thenReturn(Mono.never());

                Mono<String> result = externalServiceConfig.invokeExternalService(serviceUrl, key, value, headers -> {});
                StepVerifier.create(result)
                .expectError(DocCenterServiceException.class)
                .verify();
        }
}
