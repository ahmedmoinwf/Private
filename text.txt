@ExtendWith(MockitoExtension.class)
public class ExternalServiceConfigTest {

    @Mock
    private WebClient webClientMock;

    @InjectMocks
    private ExternalServiceConfig externalServiceConfig;

    @Test
    public void testInvokeExternalService() {
        // Arrange
        String serviceUrl = "/api/external-service";
        String key = "param";
        String value = "value";
        Consumer<HttpHeaders> serviceSpecificRequestHeaders = headers -> headers.set("Authorization", "Bearer token");

        WebClient.RequestHeadersUriSpec<?> requestHeadersUriSpecMock = mock(WebClient.RequestHeadersUriSpec.class);
        WebClient.RequestHeadersSpec<?> requestHeadersSpecMock = mock(WebClient.RequestHeadersSpec.class);
        WebClient.ResponseSpec responseSpecMock = mock(WebClient.ResponseSpec.class);
        Mono<String> responseBodyMono = Mono.just("Response body");

        when(webClientMock.get()).thenReturn(requestHeadersUriSpecMock);
        when(requestHeadersUriSpecMock.uri(any(Function.class))).thenReturn(requestHeadersSpecMock);
        when(requestHeadersSpecMock.headers(any(Consumer.class))).thenReturn(requestHeadersSpecMock);
        when(requestHeadersSpecMock.retrieve()).thenReturn(responseSpecMock);
        when(responseSpecMock.onStatus(any(Predicate.class), any(Function.class))).thenReturn(responseSpecMock);
        when(responseSpecMock.bodyToMono(String.class)).thenReturn(responseBodyMono);

        // Act
        Mono<String> result = externalServiceConfig.invokeExternalService(serviceUrl, key, value, serviceSpecificRequestHeaders);

        // Assert
        StepVerifier.create(result)
                    .expectNext("Response body")
                    .verifyComplete();
    }
}
